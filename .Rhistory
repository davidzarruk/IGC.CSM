install.packages('devtools')
library('devtools')
install_github("davidzarruk/IGCities", force = TRUE)
library(IGCities)
library(IGCities)
library('devtools')
install_github("davidzarruk/IGCities", force = TRUE)
library(IGCities)
library('devtools')
install_github("davidzarruk/IGCities", force = TRUE)
library(IGCities)
library('devtools')
install_github("davidzarruk/IGCities", force = TRUE)
library(IGCities)
library('devtools')
install_github("davidzarruk/IGCities", force = TRUE)
library(IGCities)
library(IGCities)
library(IGCities)
library(IGCities)
source("~/Documents/IGCities/R/utils.R")
source("~/Documents/IGCities/R/basic_model.R")
setwd("/Users/zarruk/Documents/IGCities/")
#-----------------#
#   Parameters    #
#-----------------#
# Data
data_locations = read.csv("data/Data for model/Chars.csv")
data_times = read.csv("data/Data for model/MatrixTravelTimes_mins.csv")
L_j = as.data.frame(data_locations$t_w_vodacom) # cantidad de trabajadores en cada location j
L_i = as.data.frame(data_locations$t_r_vodacom) # cantidad de habitantes en cada location j
L_i = L_i*sum(L_j)/sum(L_i)
K = as.data.frame(data_locations$SAL_area) # tama√±o del lugar
Q = as.data.frame(data_locations$price_m2)
N = dim(L_i)[1]
t_ij = as.matrix(data_times[,2:(N+1)], dim=c(N,N))
t_ij[864,] = t_ij[863,]
t_ij[,864] = t_ij[,863]
t_ij[,714] = t_ij[,713]
t_ij[714,] = t_ij[713,]
t_ij[165,] = t_ij[164,]
t_ij[,165] = t_ij[,164]
t_ij[,138] = t_ij[,137]
t_ij[138,] = t_ij[137,]
# Parameters
alpha1 = 0.7
theta1 = 7
eta1 = 1.5
kappa1 = 2
xi1 = 1.8
nu_init = 0.005
# Number of firms
beta0 = 0.7
F = 1
sigma0 = 6
# Basic Settings
tol = 1e-6
maxiter=10
zeta = 0.0001
endo_Lr = 1
z_init=10^-4
epsilon = 0.01
mu0 = 0.3
delta0 = 0.3585
rho0 = 0.9094
eta0 = 0.1548
# Test trade costs
theta1=7
# Travel time
speed = 10
# Iceberg commuting cost
lambda = 0.01
# Workers and population
L_bar  = 1
H_bar_rest = 18
#----------------------------#
#      (2) Solve Models      #
#----------------------------#
zeta = 0.1
# Invert model
inversion_m_bl  = inversionModel(N=N,
L_i=L_i,
L_j=L_j,
Q=Q,
K=K,
t_ij=t_ij,
zeta=zeta,
z_init=z_init,
alpha=alpha1,
beta=beta0,
theta=theta1,
delta=delta0,
rho=rho0,
lambda=lambda,
epsilon=epsilon,
mu=mu0,
eta=eta0,
maxiter=10);
alpha=alpha1
beta=beta0
theta=theta1
delta=delta0
rho=rho0
mu=mu0
eta=eta0
maxiter=10
# Formatting of input data
L_i = array(unlist(L_i), dim(L_i))
L_j = array(unlist(L_j), dim(L_j))
K = array(unlist(K), dim(K))
Q = array(unlist(Q), dim(Q))
t_ij = array(unlist(t_ij), dim(t_ij))
# Initialization
w_init=array(1, dim=c(N,1))
# Transformation of travel times to trade costs
D = commuting_matrix(t_ij=t_ij,
epsilon=epsilon)
tau = D$tau
# Finding the wages that match the data
WI = wages_inversion(N=N,
w_init=w_init,
theta=theta,
tau=tau,
L_i=L_i,
L_j=L_j,
nu_init=nu_init,
tol=tol,
maxiter=maxiter,
nu_intervals = nu_intervals,
nu_mult = nu_mult)
# Equilibrium wages
w = WI$w
w_tr = WI$w_tr
W_i = WI$W_i
lambda_ij_i = WI$lambda_ij_i
# Average income
Inc = av_income_simple(lambda_ij_i=lambda_ij_i,
w_tr = w_tr
)
y_bar = Inc$y_bar
DensD = density_development(Q=Q,
K=K,
w=w,
L_j=L_j,
y_bar=y_bar,
L_i=L_i,
beta=beta,
alpha=alpha,
mu=mu
)
Q_mean = DensD$Q_mean
Q_norm = DensD$Q_norm
FS_f = DensD$FS_f
FS_r = DensD$FS_r
FS = DensD$FS
varphi = DensD$varphi
ttheta = FS_f/FS
#Productivities
Prod = productivity(N=N,
Q=Q,
w=w,
L_j=L_j,
K=K,
t_ij = t_ij,
delta=delta,
lambda=lambda,
beta=beta
)
A = Prod$A
a = Prod$a
AM = living_amenities_simple(theta=theta,
N=N,
L_i=L_i,
W_i=W_i,
Q=Q,
alpha=alpha,
t_ij=t_ij,
rho=rho,
eta=eta
)
B = AM$B
b = AM$b
# Save and export
Q_alpha = Q_norm^(1-alpha)
u = array_operator(array_operator(W_i,Q_alpha,'/'),B,'*')
list(A=A, a=a, u=u, B=B, b=b, w=w, varphi=varphi, Q_norm=Q_norm)
source("~/Documents/IGCities/R/basic_model.R")
inversion_m_bl  = inversionModel(N=N,
L_i=L_i,
L_j=L_j,
Q=Q,
K=K,
t_ij=t_ij,
zeta=zeta,
z_init=z_init,
alpha=alpha1,
beta=beta0,
theta=theta1,
delta=delta0,
rho=rho0,
lambda=lambda,
epsilon=epsilon,
mu=mu0,
eta=eta0,
maxiter=10);
